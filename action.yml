name: 'build libcloudph++'
description: 'builds libcloudph++, loads UWLCM Apptainer image for dependencies'
inputs:
  disable_cuda:
    description: 'disable CUDA build?'
    required: true
    default: "false"
  build_type:
    description: 'CMake build type: Release, Debug, ...'
    required: true
    default: "Release"
  threads:
    description: "number of threads used by make"
    required: true
    default: 1
  path:
    description: "path to the dir with libcloudphxx code"
    required: true
  install_prefix:
    description: "CMake install prefix"
    required: true
    default: "/usr/local"
  tag:
    description: 'Apptainer image tag'
    required: true
    default: 'uwlcm_ubuntu_24_04_cuda_12_9_0'
  cxx:
    description: 'C++ compiler'
    required: true
    default: 'g++'

runs:
  using: "composite"
  steps:
  - name: Install Nvidia driver
    shell: bash
    run: |
      [ "${{inputs.disable_cuda}}" = "false" ] && sudo apt install --no-install-recommends nvidia-driver-570 || true
 #   if: ${{!inputs.disable_cuda}}

  - name: load UWLCM Apptainer image
    uses: igfuw/load_UWLCM_singularity_image@main
    with:
      path: ${{ inputs.path }}/apptainer_images
      tag: ${{ inputs.tag }}
  
#  - name: Install Singularity
#    #when installed from this action, .SIF is always converted to sandbox (could be related to: https://githubmemory.com/repo/hpcng/singularity/issues/6065)
#    uses: eWaterCycle/setup-singularity@v6
#    with:
#      singularity-version: 3.7.1
#    #apt installation following https://sylabs.io/guides/3.0/user-guide/installation.html, but this is a too old version and uninstalls python-is-python3
##    run: |
##      wget -O- http://neuro.debian.net/lists/focal.de-fzj.libre | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
##      sudo apt-key adv --recv-keys --keyserver hkps://keyserver.ubuntu.com 0xA5D32F012649A5A9
##      sudo apt-get update
##      sudo apt-get install -y singularity-container
#          
#  - name: Cache UWLCM Singularity image
#    id: cache_singularity
#    uses: actions/cache@v2
#    with:
#      path: '${{ github.workspace }}/singularity_images/uwlcm_ubuntu_20_04_cuda_11_4.sif'
#      key: 'sng_ubuntu_20_04_cuda_11_4'
#      
#  - name: Download UWLCM Singularity image
#    shell: bash
##    if: steps.cache_singularity.outputs.cache-hit != 'true'
#    run: |
#      [ "${{steps.cache_singularity.outputs.cache-hit}}" != "true" ] && \
#      {
#      mkdir '${{ github.workspace }}/singularity_images';
#      singularity pull --disable-cache --dir '${{ github.workspace }}/singularity_images' library://pdziekan/default/uwlcm:ubuntu_20_04_cuda_11_4;
#      } \
#      || \
#      true
#    # disable Singularity cache, we cache manually
#
#  - name: Set friendly Singularity image name
#    uses: allenevans/set-env@v2.0.0
#    with:
#      SI: '${{ github.workspace }}/singularity_images/uwlcm_ubuntu_20_04_cuda_11_4.sif'


  # Debugging with a ssh session
#  - name: Setup tmate session
#    uses: mxschmitt/action-tmate@v3

    
  - name: Configure CMake
    working-directory: ${{ inputs.path }}
    shell: bash
    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    run: apptainer exec LD_DEBUG=libs $SI cmake -B ${{inputs.path}}/build -DCMAKE_BUILD_TYPE=${{inputs.build_type}} -DLIBCLOUDPHXX_FORCE_MULTI_CUDA=True -DLIBCLOUDPHXX_DISABLE_CUDA=${{inputs.disable_cuda}} -DCMAKE_INSTALL_PREFIX=${{inputs.install_prefix}} -DCMAKE_CXX_COMPILER=${{inputs.cxx}}
#
  - name: Build libcloudph++
    shell: bash
    # Build your program with the given configuration
    run: VERBOSE=1 apptainer exec $SI cmake --build ${{inputs.path}}/build --config ${{inputs.build_type}} -j${{inputs.threads}}
